// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241026143736_AddPermissionsAndUserPermissions")]
    partial class AddPermissionsAndUserPermissions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3c323777-d891-420e-800a-035cb7562889",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ec7f727-913b-440a-b8bd-83d03db4adab",
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(6797),
                            Email = "mahitoshgiri287@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH6GsYkUUiSBY+t8Sf8DTu9/2CR3Wkai+sZzG8vajg4rPdKrR9a1JpnwYcXOFlEJ2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8db8d7a6-25c4-4e61-90e2-a4d5405e88b4",
                            Slug = "admin-user",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(6800),
                            UserName = "adminUser"
                        });
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.CustomRoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "B993F718-51B6-4FBE-9F17-037FA1585827",
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 302, DateTimeKind.Utc).AddTicks(3454),
                            Name = "Admin",
                            Slug = "admin",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 302, DateTimeKind.Utc).AddTicks(3455)
                        },
                        new
                        {
                            Id = "C0CF4D0F-9BC6-4B70-BAED-2CA10F1AAA30",
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 302, DateTimeKind.Utc).AddTicks(3458),
                            Name = "Subadmin",
                            Slug = "subadmin",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 302, DateTimeKind.Utc).AddTicks(3458)
                        },
                        new
                        {
                            Id = "5482176B-6706-476D-A273-1EA9AD5AD217",
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 302, DateTimeKind.Utc).AddTicks(3461),
                            Name = "Supersubadmin",
                            Slug = "supersubadmin",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 302, DateTimeKind.Utc).AddTicks(3461)
                        });
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.OtpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Otps");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.PermissionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7132),
                            PermissionName = "Create Product",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7133)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7139),
                            PermissionName = "Edit Product",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7139)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7140),
                            PermissionName = "Delete Product",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7140)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7141),
                            PermissionName = "View Orders",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7141)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7142),
                            PermissionName = "Manage Users",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7142)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7143),
                            PermissionName = "Access Admin Dashboard",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7144)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7145),
                            PermissionName = "Edit User",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7146)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7146),
                            PermissionName = "Delete User",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7147)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7148),
                            PermissionName = "Create Category",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7148)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7149),
                            PermissionName = "Edit Category",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7149)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7150),
                            PermissionName = "Delete Category",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7150)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7151),
                            PermissionName = "Create Subcategory",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7151)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7152),
                            PermissionName = "Edit Subcategory",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7152)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7153),
                            PermissionName = "Delete Subcategory",
                            UpdatedAt = new DateTime(2024, 10, 26, 14, 37, 35, 362, DateTimeKind.Utc).AddTicks(7154)
                        });
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.UserPermissionModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.UserPermissionModel", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.PermissionModel", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUserModel", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.CustomRoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.CustomRoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserModel", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.PermissionModel", b =>
                {
                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
