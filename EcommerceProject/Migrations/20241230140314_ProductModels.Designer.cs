// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241230140314_ProductModels")]
    partial class ProductModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4bb190a-0d01-4e71-a353-ce8be06dda4f",
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4022),
                            Email = "mahitoshgiri287@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBRROp0pdSdUbGsU5a1vneMvuveDHPL96V929WBVBNPPaNj/JSBT/KN5mWX57V10Mg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "SomeDummyTokenValue3543564",
                            RoleId = "B993F718-51B6-4FBE-9F17-037FA1585827",
                            SecurityStamp = "b7d927e2-4617-49da-8447-b2cf424d9efb",
                            Slug = "admin-user",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4029),
                            UserName = "adminUser"
                        });
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.CustomRoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "B993F718-51B6-4FBE-9F17-037FA1585827",
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 624, DateTimeKind.Utc).AddTicks(698),
                            Name = "Admin",
                            Slug = "admin",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 624, DateTimeKind.Utc).AddTicks(698)
                        },
                        new
                        {
                            Id = "C0CF4D0F-9BC6-4B70-BAED-2CA10F1AAA30",
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 624, DateTimeKind.Utc).AddTicks(701),
                            Name = "Subadmin",
                            Slug = "subadmin",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 624, DateTimeKind.Utc).AddTicks(701)
                        },
                        new
                        {
                            Id = "5482176B-6706-476D-A273-1EA9AD5AD217",
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 624, DateTimeKind.Utc).AddTicks(704),
                            Name = "Supersubadmin",
                            Slug = "supersubadmin",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 624, DateTimeKind.Utc).AddTicks(704)
                        });
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.ImageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.OtpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Otps");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.PermissionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4163),
                            PermissionName = "Create Product",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4164)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4173),
                            PermissionName = "Edit Product",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4173)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4175),
                            PermissionName = "Delete Product",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4175)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4176),
                            PermissionName = "View Orders",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4177)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4178),
                            PermissionName = "View User",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4178)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4192),
                            PermissionName = "Access Admin Dashboard",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4192)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4195),
                            PermissionName = "Edit User",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4195)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4196),
                            PermissionName = "Delete User",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4197)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4198),
                            PermissionName = "Create Category",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4198)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4200),
                            PermissionName = "Edit Category",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4201)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4202),
                            PermissionName = "Delete Category",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4203)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4204),
                            PermissionName = "Create Subcategory",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4204)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4205),
                            PermissionName = "Edit Subcategory",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4206)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4207),
                            PermissionName = "Delete Subcategory",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4207)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4208),
                            PermissionName = "Create User",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4209)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4210),
                            PermissionName = "View Category",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4210)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4212),
                            PermissionName = "View Subcategory",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4212)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4214),
                            PermissionName = "View Product",
                            UpdatedAt = new DateTime(2024, 12, 30, 14, 3, 13, 701, DateTimeKind.Utc).AddTicks(4215)
                        });
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("finalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.SubCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.UserPermissionModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 1
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 2
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 3
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 4
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 5
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 6
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 7
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 8
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 9
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 10
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 11
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 12
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 13
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 14
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 15
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 16
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 17
                        },
                        new
                        {
                            UserId = "ecc0548c-b9fe-429f-af0b-8b7aafd10138",
                            PermissionId = 18
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserModel", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.CustomRoleModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.ImageModel", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.ProductModel", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.ProductModel", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.CategoryModel", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcommerceProject.Areas.Admin.Models.SubCategoryModel", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.SubCategoryModel", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.CategoryModel", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.UserPermissionModel", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.PermissionModel", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUserModel", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.CustomRoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EcommerceProject.Areas.Admin.Models.CustomRoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserModel", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.CategoryModel", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.PermissionModel", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.ProductModel", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("EcommerceProject.Areas.Admin.Models.SubCategoryModel", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
